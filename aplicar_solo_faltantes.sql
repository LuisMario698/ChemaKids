-- Aplicar solo las tablas faltantes según el esquema correcto de ChemaKids
-- Ejecutar en Supabase SQL Editor

-- Verificar si las tablas ya existen antes de crear
-- Solo crear la tabla juegos que falta en los logs

-- Tabla: juegos (faltante según los logs)
-- Catálogo de juegos disponibles en la aplicación
CREATE TABLE IF NOT EXISTS public.juegos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  descripcion CHARACTER VARYING(500),
  categoria CHARACTER VARYING(100),
  nivel_minimo BIGINT NOT NULL DEFAULT 1,
  activo BOOLEAN NOT NULL DEFAULT TRUE,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT juegos_pkey PRIMARY KEY (id),
  CONSTRAINT juegos_nombre_key UNIQUE (nombre)
) TABLESPACE pg_default;

-- Aplicar el esquema existente tal como está en 1-database_schemas.sql
-- Solo si las tablas no existen

-- Tabla: progreso_invitado
CREATE TABLE IF NOT EXISTS public.progreso_invitado (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  racha_1 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  racha_2 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  nivel BIGINT NOT NULL DEFAULT '1'::BIGINT,
  CONSTRAINT progreso_invitado_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Tabla: progreso_usuario
CREATE TABLE IF NOT EXISTS public.progreso_usuario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  racha_1 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  racha_2 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  nivel BIGINT NOT NULL DEFAULT '1'::BIGINT,
  CONSTRAINT progreso_usuario_pkey PRIMARY KEY (id),
  CONSTRAINT progreso_usuario_id_key UNIQUE (id)
) TABLESPACE pg_default;

-- Tabla: usuario (según esquema original sin columna nivel)
CREATE TABLE IF NOT EXISTS public.usuario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  email CHARACTER VARYING(255) NULL,
  edad BIGINT NOT NULL,
  auth_user UUID NULL,
  id_progreso BIGINT NOT NULL,
  CONSTRAINT usuario_pkey PRIMARY KEY (id),
  CONSTRAINT usuario_id_key UNIQUE (id),
  CONSTRAINT usuario_email_key UNIQUE (email),
  CONSTRAINT usuario_auth_user_key UNIQUE (auth_user),
  CONSTRAINT usuario_auth_user_fkey FOREIGN KEY (auth_user) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT usuario_id_progreso_fkey FOREIGN KEY (id_progreso) REFERENCES progreso_usuario (id) ON DELETE CASCADE
) TABLESPACE pg_default;

-- Tabla: invitado
CREATE TABLE IF NOT EXISTS public.invitado (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  edad BIGINT NOT NULL,
  id_progreso BIGINT NOT NULL,
  CONSTRAINT invitado_pkey PRIMARY KEY (id),
  CONSTRAINT invitado_id_key UNIQUE (id),
  CONSTRAINT invitado_id_progreso_fkey FOREIGN KEY (id_progreso) REFERENCES progreso_invitado (id) ON DELETE CASCADE
) TABLESPACE pg_default;

-- Insertar juegos iniciales de ejemplo solo si no existen
INSERT INTO public.juegos (nombre, descripcion, categoria, nivel_minimo) 
SELECT * FROM (VALUES
  ('ABC Básico', 'Aprender las letras del alfabeto', 'Lenguaje', 1),
  ('Números 123', 'Contar y reconocer números', 'Matemáticas', 1),
  ('Colores y Formas', 'Identificar colores y formas básicas', 'Visual', 1),
  ('Palabras Simples', 'Formar palabras con letras', 'Lenguaje', 2),
  ('Sumas Básicas', 'Operaciones de suma sencillas', 'Matemáticas', 2)
) AS v(nombre, descripcion, categoria, nivel_minimo)
WHERE NOT EXISTS (SELECT 1 FROM public.juegos WHERE nombre = v.nombre);

-- Configurar Row Level Security (RLS) solo si no está habilitado
DO $$
BEGIN
  -- Habilitar RLS en todas las tablas
  ALTER TABLE public.usuario ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.invitado ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.progreso_usuario ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.progreso_invitado ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.juegos ENABLE ROW LEVEL SECURITY;
EXCEPTION
  WHEN OTHERS THEN
    -- Si hay error (ej. RLS ya habilitado), continuar
    NULL;
END $$;

-- Políticas RLS básicas (solo crear si no existen)

-- Políticas para tabla usuario
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'usuario' AND policyname = 'Usuarios pueden ver sus propios datos') THEN
    CREATE POLICY "Usuarios pueden ver sus propios datos" ON public.usuario
      FOR SELECT USING (auth.uid() = auth_user);
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'usuario' AND policyname = 'Usuarios pueden actualizar sus propios datos') THEN
    CREATE POLICY "Usuarios pueden actualizar sus propios datos" ON public.usuario
      FOR UPDATE USING (auth.uid() = auth_user);
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'usuario' AND policyname = 'Permitir inserción de nuevos usuarios') THEN
    CREATE POLICY "Permitir inserción de nuevos usuarios" ON public.usuario
      FOR INSERT WITH CHECK (auth.uid() = auth_user);
  END IF;
END $$;

-- Políticas para tabla progreso_usuario
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'progreso_usuario' AND policyname = 'Usuarios pueden ver su propio progreso') THEN
    CREATE POLICY "Usuarios pueden ver su propio progreso" ON public.progreso_usuario
      FOR ALL USING (
        id IN (
          SELECT id_progreso FROM public.usuario WHERE auth_user = auth.uid()
        )
      );
  END IF;
END $$;

-- Políticas para tabla juegos (lectura pública)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'juegos' AND policyname = 'Todos pueden ver juegos activos') THEN
    CREATE POLICY "Todos pueden ver juegos activos" ON public.juegos
      FOR SELECT USING (activo = true);
  END IF;
END $$;

-- Políticas para invitados (más permisivas - solo desarrollo)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'invitado' AND policyname = 'Permitir operaciones en invitados') THEN
    CREATE POLICY "Permitir operaciones en invitados" ON public.invitado FOR ALL USING (true);
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'progreso_invitado' AND policyname = 'Permitir operaciones en progreso_invitado') THEN
    CREATE POLICY "Permitir operaciones en progreso_invitado" ON public.progreso_invitado FOR ALL USING (true);
  END IF;
END $$;

-- Crear índices para optimización (solo si no existen)
CREATE INDEX IF NOT EXISTS idx_usuario_auth_user ON public.usuario(auth_user);
CREATE INDEX IF NOT EXISTS idx_usuario_email ON public.usuario(email);
CREATE INDEX IF NOT EXISTS idx_juegos_categoria ON public.juegos(categoria);
CREATE INDEX IF NOT EXISTS idx_juegos_nivel ON public.juegos(nivel_minimo);

-- Comentarios en las tablas
COMMENT ON TABLE public.usuario IS 'Usuarios registrados con autenticación (sin columna nivel - está en progreso_usuario)';
COMMENT ON TABLE public.invitado IS 'Usuarios invitados sin autenticación';
COMMENT ON TABLE public.juegos IS 'Catálogo de juegos disponibles';
COMMENT ON TABLE public.progreso_usuario IS 'Progreso general de usuarios registrados (contiene nivel)';
COMMENT ON TABLE public.progreso_invitado IS 'Progreso general de usuarios invitados (contiene nivel)';

PRINT 'Esquema aplicado correctamente. Tablas creadas según el esquema original de ChemaKids.';
