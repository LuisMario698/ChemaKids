import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter/foundation.dart';

class SupabaseService {
  static SupabaseService? _instance;
  static SupabaseService get instance => _instance ??= SupabaseService._();
  
  SupabaseService._();
  
  late final SupabaseClient _client;
  SupabaseClient get client => _client;
  
  bool _initialized = false;
  bool get isInitialized => _initialized;
  
  /// Inicializa la conexi√≥n con Supabase
  Future<void> initialize({
    required String url,
    required String anonKey,
  }) async {
    try {
      print('üöÄ [SupabaseService] Inicializando conexi√≥n con Supabase...');
      
      await Supabase.initialize(
        url: url,
        anonKey: anonKey,
        debug: kDebugMode,
      );
      
      _client = Supabase.instance.client;
      _initialized = true;
      
      print('‚úÖ [SupabaseService] Conexi√≥n establecida exitosamente');
      print('üìä [SupabaseService] URL: $url');
      print('üîë [SupabaseService] Clave an√≥nima configurada');
      
      // Verificar conexi√≥n
      await _testConnection();
      
    } catch (e) {
      print('‚ùå [SupabaseService] Error al inicializar Supabase: $e');
      _initialized = false;
      rethrow;
    }
  }
  
  /// Prueba la conexi√≥n a la base de datos
  Future<void> _testConnection() async {
    try {
      print('üîç [SupabaseService] Probando conexi√≥n...');
      
      // Hacer una consulta simple para probar la conexi√≥n
      final response = await _client
          .from('juegos')
          .select('count')
          .count();
      
      print('‚úÖ [SupabaseService] Conexi√≥n verificada - Respuesta: ${response.count}');
      
    } catch (e) {
      print('‚ö†Ô∏è [SupabaseService] Advertencia - No se pudo verificar la conexi√≥n: $e');
      // No lanzamos error aqu√≠ porque las tablas pueden no existir a√∫n
    }
  }
  
  /// Obtiene el cliente de Supabase actual
  SupabaseClient getClient() {
    if (!_initialized) {
      throw Exception('SupabaseService no ha sido inicializado. Llama a initialize() primero.');
    }
    return _client;
  }
  
  /// Verifica si hay una sesi√≥n de usuario activa
  User? get currentUser {
    if (!_initialized) return null;
    return _client.auth.currentUser;
  }
  
  /// Obtiene la sesi√≥n actual
  Session? get currentSession {
    if (!_initialized) return null;
    return _client.auth.currentSession;
  }
  
  /// Cierra la conexi√≥n (opcional)
  Future<void> dispose() async {
    print('üîö [SupabaseService] Cerrando conexi√≥n...');
    _initialized = false;
    print('‚úÖ [SupabaseService] Conexi√≥n cerrada');
  }
  
  /// Manejo de errores centralizados
  void handleError(String operation, dynamic error) {
    print('‚ùå [SupabaseService] Error en $operation: $error');
    
    if (error is PostgrestException) {
      print('üìã [SupabaseService] Detalles del error PostgreSQL:');
      print('   - C√≥digo: ${error.code}');
      print('   - Mensaje: ${error.message}');
      print('   - Detalles: ${error.details}');
    }
  }

  /// Verifica si la conexi√≥n est√° activa
  bool get isConnected => _initialized;

  /// M√©todo para testing - permite verificar la conexi√≥n
  Future<bool> testConnection() async {
    try {
      print('üîç [SupabaseService] Probando conexi√≥n con Supabase...');
      
      if (!_initialized) {
        print('‚ùå [SupabaseService] Servicio no inicializado');
        return false;
      }
      
      // Intenta hacer una consulta simple para verificar la conexi√≥n
      await _client.from('usuario').select('count').limit(1);
      
      print('‚úÖ [SupabaseService] Conexi√≥n con Supabase exitosa');
      return true;
      
    } catch (e) {
      print('‚ùå [SupabaseService] Error en la conexi√≥n con Supabase: $e');
      return false;
    }
  }

  /// M√©todo est√°tico para inicializar (compatible con DatabaseManager)
  static Future<void> initializeStatic({
    required String url,
    required String anonKey,
  }) async {
    await instance.initialize(url: url, anonKey: anonKey);
  }

  /// M√©todo est√°tico para cerrar conexi√≥n
  static Future<void> disposeStatic() async {
    await instance.dispose();
  }
}
