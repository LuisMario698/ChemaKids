-- ChemaKids - Esquema completo de base de datos para Supabase
-- Ejecutar este script completo en el SQL Editor de Supabase

-- Tabla: progreso_invitado
-- Almacena el progreso de los usuarios invitados
CREATE TABLE IF NOT EXISTS public.progreso_invitado (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  racha_1 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  racha_2 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  nivel BIGINT NOT NULL DEFAULT '1'::BIGINT,
  CONSTRAINT progreso_invitado_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Tabla: progreso_usuario
-- Almacena el progreso de los usuarios registrados
CREATE TABLE IF NOT EXISTS public.progreso_usuario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  racha_1 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  racha_2 BIGINT NOT NULL DEFAULT '0'::BIGINT,
  nivel BIGINT NOT NULL DEFAULT '1'::BIGINT,
  CONSTRAINT progreso_usuario_pkey PRIMARY KEY (id),
  CONSTRAINT progreso_usuario_id_key UNIQUE (id)
) TABLESPACE pg_default;

-- Tabla: juegos
-- Catálogo de juegos disponibles en la aplicación
CREATE TABLE IF NOT EXISTS public.juegos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  descripcion CHARACTER VARYING(500),
  categoria CHARACTER VARYING(100),
  nivel_minimo BIGINT NOT NULL DEFAULT 1,
  activo BOOLEAN NOT NULL DEFAULT TRUE,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT juegos_pkey PRIMARY KEY (id),
  CONSTRAINT juegos_nombre_key UNIQUE (nombre)
) TABLESPACE pg_default;

-- Tabla: usuario
-- Información de usuarios registrados con autenticación
CREATE TABLE IF NOT EXISTS public.usuario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  email CHARACTER VARYING(255) NULL,
  edad BIGINT NOT NULL,
  auth_user UUID NULL,
  id_progreso BIGINT NOT NULL,
  fecha_registro TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  activo BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT usuario_pkey PRIMARY KEY (id),
  CONSTRAINT usuario_id_key UNIQUE (id),
  CONSTRAINT usuario_email_key UNIQUE (email),
  CONSTRAINT usuario_auth_user_key UNIQUE (auth_user),
  CONSTRAINT usuario_auth_user_fkey FOREIGN KEY (auth_user) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT usuario_id_progreso_fkey FOREIGN KEY (id_progreso) REFERENCES progreso_usuario (id) ON DELETE CASCADE
) TABLESPACE pg_default;

-- Tabla: invitado
-- Perfiles de invitados temporales (sin autenticación)
CREATE TABLE IF NOT EXISTS public.invitado (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre CHARACTER VARYING(255) NOT NULL,
  edad BIGINT NOT NULL,
  id_progreso BIGINT NOT NULL,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  activo BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT invitado_pkey PRIMARY KEY (id),
  CONSTRAINT invitado_id_key UNIQUE (id),
  CONSTRAINT invitado_id_progreso_fkey FOREIGN KEY (id_progreso) REFERENCES progreso_invitado (id) ON DELETE CASCADE
) TABLESPACE pg_default;

-- Tabla: progreso
-- Registros detallados de progreso en juegos específicos
CREATE TABLE IF NOT EXISTS public.progreso (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_juego BIGINT NOT NULL,
  nivel BIGINT NOT NULL DEFAULT 1,
  puntaje BIGINT NOT NULL DEFAULT 0,
  racha_maxima BIGINT NOT NULL DEFAULT 0,
  tiempo_jugado INTEGER DEFAULT 0, -- en segundos
  completado BOOLEAN NOT NULL DEFAULT FALSE,
  fecha_ultima_partida TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  -- Campos para usuarios registrados
  id_usuario BIGINT NULL,
  -- Campos para invitados
  id_invitado BIGINT NULL,
  CONSTRAINT progreso_pkey PRIMARY KEY (id),
  CONSTRAINT progreso_id_juego_fkey FOREIGN KEY (id_juego) REFERENCES juegos (id) ON DELETE CASCADE,
  CONSTRAINT progreso_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuario (id) ON DELETE CASCADE,
  CONSTRAINT progreso_id_invitado_fkey FOREIGN KEY (id_invitado) REFERENCES invitado (id) ON DELETE CASCADE,
  -- Constraint para asegurar que tenga usuario O invitado, pero no ambos
  CONSTRAINT progreso_usuario_xor_invitado CHECK (
    (id_usuario IS NOT NULL AND id_invitado IS NULL) OR 
    (id_usuario IS NULL AND id_invitado IS NOT NULL)
  )
) TABLESPACE pg_default;

-- Insertar juegos iniciales de ejemplo
INSERT INTO public.juegos (nombre, descripcion, categoria, nivel_minimo) VALUES
('ABC Básico', 'Aprender las letras del alfabeto', 'Lenguaje', 1),
('Números 123', 'Contar y reconocer números', 'Matemáticas', 1),
('Colores y Formas', 'Identificar colores y formas básicas', 'Visual', 1),
('Palabras Simples', 'Formar palabras con letras', 'Lenguaje', 2),
('Sumas Básicas', 'Operaciones de suma sencillas', 'Matemáticas', 2)
ON CONFLICT (nombre) DO NOTHING;

-- Configurar Row Level Security (RLS)
ALTER TABLE public.usuario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invitado ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progreso_usuario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progreso_invitado ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.juegos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progreso ENABLE ROW LEVEL SECURITY;

-- Políticas RLS para tabla usuario
-- Los usuarios pueden ver y editar solo sus propios datos
CREATE POLICY "Usuarios pueden ver sus propios datos" ON public.usuario
    FOR SELECT USING (auth.uid() = auth_user);

CREATE POLICY "Usuarios pueden actualizar sus propios datos" ON public.usuario
    FOR UPDATE USING (auth.uid() = auth_user);

CREATE POLICY "Permitir inserción de nuevos usuarios" ON public.usuario
    FOR INSERT WITH CHECK (auth.uid() = auth_user);

-- Políticas RLS para tabla progreso_usuario
-- Los usuarios pueden ver y editar solo su propio progreso
CREATE POLICY "Usuarios pueden ver su propio progreso" ON public.progreso_usuario
    FOR ALL USING (
        id IN (
            SELECT id_progreso FROM public.usuario WHERE auth_user = auth.uid()
        )
    );

-- Políticas RLS para tabla juegos
-- Todos pueden ver los juegos (solo lectura para usuarios autenticados)
CREATE POLICY "Todos pueden ver juegos activos" ON public.juegos
    FOR SELECT USING (activo = true);

-- Políticas RLS para tabla progreso
-- Los usuarios pueden ver y editar solo su propio progreso en juegos
CREATE POLICY "Usuarios pueden ver su progreso en juegos" ON public.progreso
    FOR SELECT USING (
        id_usuario IN (
            SELECT id FROM public.usuario WHERE auth_user = auth.uid()
        )
    );

CREATE POLICY "Usuarios pueden insertar su progreso en juegos" ON public.progreso
    FOR INSERT WITH CHECK (
        id_usuario IN (
            SELECT id FROM public.usuario WHERE auth_user = auth.uid()
        )
    );

CREATE POLICY "Usuarios pueden actualizar su progreso en juegos" ON public.progreso
    FOR UPDATE USING (
        id_usuario IN (
            SELECT id FROM public.usuario WHERE auth_user = auth.uid()
        )
    );

-- Políticas RLS para invitados (más permisivas ya que no hay autenticación)
-- Nota: En producción, considera implementar algún tipo de identificación de sesión
CREATE POLICY "Permitir operaciones en invitados" ON public.invitado FOR ALL USING (true);
CREATE POLICY "Permitir operaciones en progreso_invitado" ON public.progreso_invitado FOR ALL USING (true);

-- Crear índices para optimizar consultas frecuentes
CREATE INDEX IF NOT EXISTS idx_usuario_auth_user ON public.usuario(auth_user);
CREATE INDEX IF NOT EXISTS idx_usuario_email ON public.usuario(email);
CREATE INDEX IF NOT EXISTS idx_progreso_usuario_juego ON public.progreso(id_usuario, id_juego);
CREATE INDEX IF NOT EXISTS idx_progreso_invitado_juego ON public.progreso(id_invitado, id_juego);
CREATE INDEX IF NOT EXISTS idx_juegos_categoria ON public.juegos(categoria);
CREATE INDEX IF NOT EXISTS idx_juegos_nivel ON public.juegos(nivel_minimo);

-- Comentarios en las tablas
COMMENT ON TABLE public.usuario IS 'Usuarios registrados con autenticación';
COMMENT ON TABLE public.invitado IS 'Usuarios invitados sin autenticación';
COMMENT ON TABLE public.juegos IS 'Catálogo de juegos disponibles';
COMMENT ON TABLE public.progreso IS 'Progreso detallado en juegos específicos';
COMMENT ON TABLE public.progreso_usuario IS 'Progreso general de usuarios registrados';
COMMENT ON TABLE public.progreso_invitado IS 'Progreso general de usuarios invitados';
